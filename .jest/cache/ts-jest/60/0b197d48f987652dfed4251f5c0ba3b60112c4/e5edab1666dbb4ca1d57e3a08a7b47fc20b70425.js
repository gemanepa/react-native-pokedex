"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const react_native_1 = require("react-native");
const helpers_1 = require("../../helpers");
const styles_1 = require("./styles");
/* eslint-enable no-unused-vars */
class HomeScreen extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.state = {
            data: [],
            loading: true,
            searchText: ''
        };
        this.renderPokemon = this.renderPokemon.bind(this);
        this.handleChangeText = this.handleChangeText.bind(this);
    }
    componentDidMount() {
        const { pokemon } = require('../../../assets/data/json/pokemonList.json');
        this.setState({
            loading: false,
            data: pokemon
        });
    }
    handleChangeText(text) {
        this.setState({ searchText: text });
    }
    getFilteredData() {
        if (this.state.searchText.trim().toLowerCase() === '')
            return this.state.data;
        const data = this.state.data.filter(pokemon => {
            return pokemon.name.toLowerCase().includes(this.state.searchText.toLowerCase());
        });
        return data;
    }
    renderPokemon(toRender) {
        const pokemon = toRender.item;
        const types = pokemon.types.map(typeName => {
            return (<react_native_1.Image key={`${pokemon.name}_${typeName}`} style={styles_1.styles.type} source={helpers_1.getPokemonTypeByName(typeName).image}/>);
        });
        const onPress = () => this.props.navigation.navigate('Details', { pokemon });
        return (<react_native_1.TouchableOpacity testID={`list-${pokemon.name.toLowerCase()}`} key={`${pokemon.name}_touch`} onPress={onPress}>
        <react_native_1.View style={styles_1.styles.item}>
          <react_native_1.View>
            <react_native_1.Text style={styles_1.styles.itemNumber} key={pokemon.index}>
              #{pokemon.localNumber}
            </react_native_1.Text>
            <react_native_1.Text style={styles_1.styles.itemName} key={pokemon.name}>
              {pokemon.name}
            </react_native_1.Text>
            <react_native_1.View style={styles_1.styles.typeContainer}>
              {types}
            </react_native_1.View>
          </react_native_1.View>
          <react_native_1.Image style={styles_1.styles.itemImage} source={{ uri: pokemon.sprites.home }}/>
        </react_native_1.View>
      </react_native_1.TouchableOpacity>);
    }
    render() {
        return (<react_native_1.View testID='home' style={styles_1.styles.container}>
        <react_native_1.TextInput testID='search-bar' style={styles_1.styles.searchBar} onChangeText={this.handleChangeText} value={this.state.searchText} clearButtonMode='always' maxLength={15} placeholder='Search by name'/>
        {this.state.loading ? <react_native_1.ActivityIndicator /> : (<react_native_1.FlatList testID='pokemon-list' data={this.getFilteredData()} renderItem={this.renderPokemon} keyExtractor={(item, index) => `${index}`}/>)}
        <react_native_1.View style={styles_1.styles.copyrightContainer}>
          <react_native_1.Text testID='copyright-disclaimer' style={styles_1.styles.copyright}>
            This unofficial app is not supported or approved by Nintento, Game Freak,
            or The Pokémon Company. It is not affiliated with either of these companies.

            Pokémon images & names © 1995-2020 Nintendo/Game Freak.
          </react_native_1.Text>
        </react_native_1.View>
      </react_native_1.View>);
    }
}
exports.default = HomeScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,